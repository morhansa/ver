<?php
/**
 * @var $block \MagoArab\CdnIntegration\Block\Adminhtml\System\Config\EnhancedUrlAnalyzer
 */
?>
<div class="actions actions-analyze-urls">
    <div class="analyze-buttons" style="margin-bottom: 10px;">
        <?= $block->getButtonHtml() ?>
        <?= $block->getAdvancedButtonHtml() ?>
        <button type="button" id="direct_paste_button" class="action-secondary">
            <?= __('Paste URLs Directly') ?>
        </button>
    </div>
    
    <div id="analyze-settings" style="display: none; margin: 10px 0; padding: 10px; background: #f9f9f9; border: 1px solid #e3e3e3;">
        <div class="field">
            <label for="store_url">
                <?= __('Store URL') ?>
                <span class="required">*</span>
            </label>
            <div class="control">
                <input type="text" id="store_url" value="<?= $block->escapeUrl($block->getStoreUrl()) ?>" 
                       class="input-text required-entry" style="width: 350px;">
            </div>
        </div>
        
        <!-- Specific URL field - moved inside analyze-settings -->
        <div class="field" id="specific-url-field" style="margin-top: 10px;">
            <label for="specific_url">
                <?= __('Specific Page URL to Analyze (Optional)') ?>
            </label>
            <div class="control">
            <input type="text" id="specific_url" 
       value="<?= $block->escapeUrl($block->getSpecificUrl()) ?>" 
       placeholder="<?= __('Enter full URL of a specific page (e.g. category or product page)') ?>" 
       class="input-text" style="width: 350px;">
                <div style="margin-top: 5px; font-size: 12px; color: #666;">
                    <?= __('Leave empty to scan homepage, or enter a specific page URL from your store.') ?>
                </div>
            </div>
        </div>
        
        <div class="field" id="advanced-settings" style="margin-top: 10px; display: none;">
            <label for="max_pages">
                <?= __('Maximum pages to analyze') ?>
            </label>
            <div class="control">
                <input type="number" id="max_pages" value="5" min="1" max="20" class="input-text" style="width: 80px;">
                <div style="margin-top: 5px; font-size: 12px; color: #666;">
                    <?= __('More pages will find more URLs but will take longer to complete.') ?>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Direct URL paste area -->
    <div id="direct-paste-area" style="display: none; margin: 10px 0; padding: 10px; background: #f9f9f9; border: 1px solid #e3e3e3;">
        <div class="field">
            <label for="pasted_urls">
                <?= __('Paste URLs (one per line)') ?>
                <span class="required">*</span>
            </label>
            <div class="control">
                <textarea id="pasted_urls" class="input-text" rows="10" style="width: 100%;"></textarea>
            </div>
        </div>
        <div style="margin-top: 10px;">
            <button type="button" id="analyze_pasted_urls" class="action-primary">
                <?= __('Analyze Pasted URLs') ?>
            </button>
        </div>
    </div>
</div>

<div id="url-analyzer-results" style="display: none; margin-top: 20px;">
    <!-- Results template -->
    <div class="results-header" style="padding: 12px 15px; background: #f8f8f8; border: 1px solid #ddd; border-bottom: none;">
        <h4 style="margin: 0;"><?= __('URLs Found') ?> <span id="url-count"></span></h4>
        <p style="margin: 5px 0 0;"><?= __('Select the URLs you want to serve via CDN:') ?></p>
        <div class="filter-actions" style="margin-top: 10px;">
            <input type="text" id="url-filter" placeholder="<?= __('Filter URLs...') ?>" 
                   style="width: 250px; padding: 5px;">
            <select id="url-type-filter" style="margin-left: 10px; padding: 5px; min-width: 120px;">
                <option value="all"><?= __('All Types') ?></option>
                <option value="js"><?= __('JavaScript (.js)') ?></option>
                <option value="css"><?= __('CSS (.css)') ?></option>
                <option value="images"><?= __('Images') ?></option>
                <option value="fonts"><?= __('Fonts') ?></option>
                <option value="merged"><?= __('Merged Files') ?></option>
                <option value="other"><?= __('Other') ?></option>
            </select>
            <div class="filter-status" style="display: inline-block; margin-left: 15px; font-style: italic;"></div>
        </div>
    </div>
    <div class="url-list" style="max-height: 300px; overflow-y: auto; margin-bottom: 0; padding: 15px; background: #fff; border: 1px solid #ddd;"></div>
    
    <div class="url-actions" style="margin-top: 0; padding: 12px 15px; background: #f8f8f8; border: 1px solid #ddd; border-top: none;">
        <button type="button" id="select-all-urls" class="action-secondary"><?= __('Select All') ?></button>
        <button type="button" id="add-selected-urls" class="action-primary"><?= __('Add Selected URLs') ?></button>
        <?= $block->getUploadButtonHtml() ?>
    </div>
    
    <div id="upload-progress" style="margin-top: 10px; display: none;">
        <div class="progress-status" style="margin-bottom: 5px;"></div>
        <div class="progress-bar-container" style="height: 20px; background-color: #eee; border-radius: 2px;">
            <div class="progress-bar" style="height: 100%; width: 0; background-color: #5cb85c; border-radius: 2px;"></div>
        </div>
        <div class="upload-details" style="margin-top: 8px; font-size: 12px; display: none;">
            <div class="upload-stats" style="margin-bottom: 3px;"></div>
            <div class="current-file-container">
                <span class="current-file-label"><?= __('Current file') ?>:</span> 
                <span class="current-file" style="font-family: monospace; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; display: inline-block; max-width: 80%; vertical-align: bottom;"></span>
            </div>
        </div>
    </div>
    
    <div id="upload-result" style="margin-top: 10px; display: none;"></div>
    
<div class="actions actions-debug-info" style="margin-top: 10px;">
    <button type="button" id="show-debug-info" class="action-secondary">
        <?= __('Show Debug Information') ?>
    </button>
</div>
<div id="debug-info" style="margin-top: 10px; border-top: 1px dashed #ccc; padding-top: 10px; display: none;">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <h4><?= __('Debug Information') ?></h4>
            <button type="button" id="toggle-debug-details" class="action-secondary" style="margin-left: 10px;">
                <?= __('Show Details') ?>
            </button>
        </div>
        <div class="debug-content" style="display: none; max-height: 200px; overflow-y: auto; white-space: pre-wrap; font-family: monospace; font-size: 12px; background: #f5f5f5; padding: 10px;"></div>
    </div>
</div>

<script>
require([
    'jquery',
    'Magento_Ui/js/modal/modal',
    'Magento_Ui/js/modal/confirm',
    'Magento_Ui/js/modal/alert',
    'mage/translate'
], function ($, modal, confirm, alert, $t) {
    'use strict';

    var isAdvancedAnalysis = false;
    var debugMode = <?= $block->helper->isDebugEnabled() ? 'true' : 'false' ?>;
    
    // Toggle between different analysis modes
    $('#direct_paste_button').click(function() {
        $('#analyze-settings').hide();
        $('#direct-paste-area').show();
        $('#advanced-settings').hide();
    });
    
    $('#analyze_urls_button').click(function() {
        $('#direct-paste-area').hide();
        $('#analyze-settings').show();
        $('#advanced-settings').hide();
        isAdvancedAnalysis = false;
    });
    
    $('#advanced_analyze_button').click(function() {
        $('#direct-paste-area').hide();
        $('#analyze-settings').show();
        $('#advanced-settings').show();
        isAdvancedAnalysis = true;
    });
        // Debug details toggle functionality
  
	// Modify existing debugLog function to only show debug info block if there's content
// Modify existing debugLog function to not show debug info block automatically
function extendedDebugLog(message, data) {
    if (!debugMode) return;
    var timestamp = new Date().toISOString();
    var logEntry = '[' + timestamp + '] ' + message;
    
    if (data !== undefined) {
        if (typeof data === 'object') {
            logEntry += '\n' + JSON.stringify(data, null, 2);
        } else {
            logEntry += '\n' + data;
        }
    }
    
    console.log('[CDN Debug] ' + logEntry);
    
    // Add to debug panel if it exists, but don't show it automatically
    var $debugContent = $('#debug-info .debug-content');
    if ($debugContent.length) {
        $debugContent.append(logEntry + '\n\n');
    // Show the container but content remains hidden
        $debugContent.scrollTop($debugContent[0].scrollHeight);
    }
}
    
    // Replace original debugLog with extended version
    debugLog = extendedDebugLog;
});
    // Helper debug log function
 // Helper debug log function
function debugLog(message, data) {
    if (!debugMode) return;
    
    var timestamp = new Date().toISOString();
    var logEntry = '[' + timestamp + '] ' + message;
    
    if (data !== undefined) {
        if (typeof data === 'object') {
            logEntry += '\n' + JSON.stringify(data, null, 2);
        } else {
            logEntry += '\n' + data;
        }
    }
    
    console.log('[CDN Debug] ' + logEntry);
    
    // Add to debug panel if it exists, but don't show it automatically
    var $debugContent = $('#debug-info .debug-content');
    if ($debugContent.length) {
        $debugContent.append(logEntry + '\n\n');
        // لا نقوم بإظهار العنصر هنا، فقط نضيف المحتوى إليه
        $debugContent.scrollTop($debugContent[0].scrollHeight);
    }
}
	// Initial state - show analyze settings
    $('#analyze-settings').show();
    $('#direct-paste-area').hide();
    
    // Reset debug panel if in debug mode
    if (debugMode) {
        $('#debug-info .debug-content').empty();
        debugLog('Debug initialized. PHP version: <?= phpversion() ?>');
        debugLog('Form Key: ' + window.FORM_KEY);
    }
    
    // Prevent form submission when clicking buttons
    $(document).on('click', '#select-all-urls, #add-selected-urls, #upload-to-github', function(e) {
        e.preventDefault();
        e.stopPropagation();
        return false;
    });
    
    // Regular URL analysis - Quick Analyze
$('#analyze_urls_button').click(function (event) {
    if (!$(this).hasClass('clicked')) {
        $(this).addClass('clicked');
        event.preventDefault();
        
        var storeUrl = $('#store_url').val().trim();
        var specificUrl = $('#specific_url').val().trim();
        
        if (!storeUrl) {
            alert({
                title: $t('Missing Information'),
                content: $t('Please enter the Store URL.')
            });
            $(this).removeClass('clicked');
            return;
        }
        
        // Use specific URL if provided, otherwise use store URL
        var urlToAnalyze = specificUrl || storeUrl;
        
        $(this).prop('disabled', true);
        $(this).text($t('Analyzing...'));
        
        debugLog('Starting URL analysis for: ' + urlToAnalyze);
        
        // Reset the results panel
        resetResults();
        
        $.ajax({
            url: '<?= $block->escapeJs($block->getAjaxUrl()) ?>',
            type: 'POST',
            dataType: 'json',
            data: {
                form_key: window.FORM_KEY,
                store_url: storeUrl,
                specific_url: specificUrl
            },
            showLoader: true,
            success: function (response) {
                debugLog('Quick analysis response', response);
                handleAnalysisResponse(response);
            },
            error: function (xhr, status, error) {
                debugLog('Quick analysis error', { xhr: xhr.responseText, status: status, error: error });
                alert({
                    title: $t('Error'),
                    content: $t('An error occurred while analyzing URLs: ') + error
                });
                $('#url-analyzer-results').hide();
            },
            complete: function () {
                $('#analyze_urls_button').prop('disabled', false);
                $('#analyze_urls_button').text($t('Quick Analyze'));
                $('#analyze_urls_button').removeClass('clicked');
            }
        });
    }
});
    
    // Advanced URL analysis
    $('#advanced_analyze_button').click(function (event) {
        if (!$(this).hasClass('clicked')) {
            $(this).addClass('clicked');
            event.preventDefault();
            
            var storeUrl = $('#store_url').val().trim();
            var maxPages = $('#max_pages').val();
            
            if (!storeUrl) {
                alert({
                    title: $t('Missing Information'),
                    content: $t('Please enter the Store URL.')
                });
                $(this).removeClass('clicked');
                return;
            }
            
            if (!maxPages || maxPages < 1) {
                maxPages = 5; // Default to 5 pages
            } else if (maxPages > 20) {
                maxPages = 20; // Cap at 20 pages to avoid overload
            }
            
            $(this).prop('disabled', true);
            $(this).text($t('Analyzing...'));
            
            debugLog('Starting advanced URL analysis for: ' + storeUrl + ' with ' + maxPages + ' pages');
            
            // Reset the results panel
            resetResults();
            
            $.ajax({
                url: '<?= $block->escapeJs($block->getAdvancedAjaxUrl()) ?>',
                type: 'POST',
                dataType: 'json',
                data: {
                    form_key: window.FORM_KEY,
                    store_url: storeUrl,
                    max_pages: maxPages
                },
                showLoader: true,
                success: function (response) {
                    debugLog('Advanced analysis response', response);
                    handleAnalysisResponse(response);
                },
                error: function (xhr, status, error) {
                    debugLog('Advanced analysis error', { xhr: xhr.responseText, status: status, error: error });
                    alert({
                        title: $t('Error'),
                        content: $t('An error occurred during advanced analysis: ') + error
                    });
                    $('#url-analyzer-results').hide();
                },
                complete: function () {
                    $('#advanced_analyze_button').prop('disabled', false);
                    $('#advanced_analyze_button').text($t('Deep Analyze (Multiple Pages)'));
                    $('#advanced_analyze_button').removeClass('clicked');
                }
            });
        }
    });
    
    // Direct URL paste analysis
    $('#analyze_pasted_urls').click(function (event) {
        if (!$(this).hasClass('clicked')) {
            $(this).addClass('clicked');
            event.preventDefault();
            
            var pastedUrls = $('#pasted_urls').val();
            
            if (!pastedUrls) {
                alert({
                    title: $t('Missing Information'),
                    content: $t('Please paste URLs to analyze.')
                });
                $(this).removeClass('clicked');
                return;
            }

            $(this).prop('disabled', true);
            $(this).text($t('Analyzing...'));
            
            debugLog('Starting direct URL analysis with ' + pastedUrls.split('\n').length + ' pasted URLs');
            
            // Reset the results panel
            resetResults();
			$.ajax({
                url: '<?= $block->escapeJs($block->getDirectAnalysisUrl()) ?>',
                type: 'POST',
                dataType: 'json',
                data: {
                    form_key: window.FORM_KEY,
                    pasted_urls: pastedUrls
                },
                showLoader: true,
                success: function (response) {
                    debugLog('Direct analysis response', response);
                    handleAnalysisResponse(response);
                },
                error: function (xhr, status, error) {
                    debugLog('Direct analysis error', { xhr: xhr.responseText, status: status, error: error });
                    alert({
                        title: $t('Error'),
                        content: $t('An error occurred while analyzing pasted URLs: ') + error
                    });
                    $('#url-analyzer-results').hide();
                },
                complete: function () {
                    $('#analyze_pasted_urls').prop('disabled', false);
                    $('#analyze_pasted_urls').text($t('Analyze Pasted URLs'));
                    $('#analyze_pasted_urls').removeClass('clicked');
                }
            });
        }
    });
        
    // Function to handle analysis response - shared by all analysis methods
    function handleAnalysisResponse(response) {
        if (response.success) {
            // Show results section
            $('#url-analyzer-results').show();
            
            // Update URL count
            $('#url-count').text('(' + response.urls.length + ')');
            
            // Clear previous results
            $('#url-analyzer-results .url-list').empty();
            $('#upload-result').hide();
            $('#upload-progress').hide();
            
            // Add each URL as a checkbox with file type indicator
            if (response.urls && response.urls.length > 0) {
                // Group URLs by type for better organization
                var urlsByType = categorizeUrls(response.urls);
                
                // Create markup for each type
                $.each(urlsByType, function(type, urls) {
                    if (urls.length > 0) {
                        var typeLabel = getTypeLabel(type);
                        var typeIcon = getTypeIcon(type);
                        
                        var typeHeader = '<div class="url-type-header" data-type="' + type + '" style="padding: 8px; background: #f2f2f2; margin-top: 10px; cursor: pointer;">' +
                            typeIcon + ' <strong>' + typeLabel + '</strong> <span class="count">(' + urls.length + ')</span>' +
                            '<span class="toggle-indicator" style="float: right;">▼</span>' +
                            '</div>';
                        
                        var urlItems = '<div class="url-type-items" data-type="' + type + '">';
                        
                        $.each(urls, function(index, url) {
                            urlItems += '<div class="url-item" data-type="' + type + '" style="margin: 8px 0 8px 15px;">' +
                                '<label style="display: block; cursor: pointer; overflow: hidden; text-overflow: ellipsis;">' +
                                '<input type="checkbox" class="url-checkbox" value="' + url + '"> ' +
                                '<span class="url-path" style="margin-left: 5px;">' + url + '</span>' +
                                '</label>' +
                                '</div>';
                        });
                        
                        urlItems += '</div>';
                        
                        $('#url-analyzer-results .url-list').append(typeHeader + urlItems);
                    }
                });
                
                // Initialize filter functionality
                initializeFilters();
                
                // Make type headers collapsible
                $('.url-type-header').click(function() {
                    var type = $(this).data('type');
                    $('.url-type-items[data-type="' + type + '"]').toggle();
                    $(this).find('.toggle-indicator').text(
                        $('.url-type-items[data-type="' + type + '"]').is(':visible') ? '▼' : '►'
                    );
                });
            } else {
                $('#url-analyzer-results .url-list').html('<p>' + $t('No suitable URLs found.') + '</p>');
            }
        } else {
            alert({
                title: $t('Error'),
                content: response.message
            });
            $('#url-analyzer-results').hide();
        }
    }
    
    // Function to categorize URLs by type
    function categorizeUrls(urls) {
        var result = {
            'js': [],
            'css': [],
            'images': [],
            'fonts': [],
            'merged': [],
            'other': []
        };
        
        $.each(urls, function(index, url) {
            // Check for merged files first, as they have specific identifiers
            if (url.indexOf('/_cache/merged/') !== -1 || url.indexOf('/_cache/minified/') !== -1) {
                result.merged.push(url);
                return; // Skip to next URL
            }
            
            var extension = url.split('.').pop().split('?')[0].toLowerCase();
            
            if (extension === 'js') {
                result.js.push(url);
            } else if (extension === 'css') {
                result.css.push(url);
            } else if (['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp'].indexOf(extension) !== -1) {
                result.images.push(url);
            } else if (['woff', 'woff2', 'ttf', 'eot', 'otf'].indexOf(extension) !== -1) {
                result.fonts.push(url);
            } else {
                result.other.push(url);
            }
        });
        
        return result;
    }
	// Function to get user-friendly type label
    function getTypeLabel(type) {
        switch (type) {
            case 'js': return $t('JavaScript Files');
            case 'css': return $t('CSS Files');
            case 'images': return $t('Image Files');
            case 'fonts': return $t('Font Files');
            case 'merged': return $t('Merged/Minified Files');
            case 'other': return $t('Other Files');
            default: return type;
        }
    }
    
    // Function to get icon for file type
    function getTypeIcon(type) {
        var icon = '';
        switch (type) {
            case 'js': 
                icon = '<span style="color: #f0db4f; font-size: 16px;">⚙</span>';
                break;
            case 'css': 
                icon = '<span style="color: #264de4; font-size: 16px;">📃</span>';
                break;
            case 'images': 
                icon = '<span style="color: #ff9800; font-size: 16px;">🖼️</span>';
                break;
            case 'fonts': 
                icon = '<span style="color: #607d8b; font-size: 16px;">🔠</span>';
                break;
            case 'merged': 
                icon = '<span style="color: #4caf50; font-size: 16px;">📦</span>';
                break;
            case 'other': 
                icon = '<span style="color: #9e9e9e; font-size: 16px;">📄</span>';
                break;
        }
        return icon;
    }
    
    // Initialize URL filtering functionality
    function initializeFilters() {
        $('#url-filter, #url-type-filter').on('input change', function() {
            var searchText = $('#url-filter').val().toLowerCase();
            var selectedType = $('#url-type-filter').val();
            
            var visibleCount = 0;
            var totalCount = $('.url-item').length;
            
            // Show/hide URL items based on filters
            $('.url-item').each(function() {
                var urlText = $(this).find('.url-path').text().toLowerCase();
                var urlType = $(this).data('type');
                
                var matchesSearch = searchText === '' || urlText.indexOf(searchText) !== -1;
                var matchesType = selectedType === 'all' || (selectedType === urlType);
                
                if (matchesSearch && matchesType) {
                    $(this).show();
                    visibleCount++;
                } else {
                    $(this).hide();
                }
            });
            
            // Update headers visibility based on their children
            $('.url-type-header').each(function() {
                var type = $(this).data('type');
                var hasVisibleItems = $('.url-item[data-type="' + type + '"]:visible').length > 0;
                
                if (hasVisibleItems) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
            
            // Update filter status
            $('.filter-status').text(
                $t('Showing %1 of %2 URLs').replace('%1', visibleCount).replace('%2', totalCount)
            );
        });
    }
    
    // Reset the results panel
    function resetResults() {
        $('#url-analyzer-results .url-list').empty();
        $('#upload-result').hide();
        $('#upload-progress').hide();
        $('.filter-status').text('');
        $('#url-count').text('');
        $('#url-filter').val('');
        $('#url-type-filter').val('all');
    }
    
    // Select All button
    $(document).on('click', '#select-all-urls', function(e) {
        e.preventDefault();
        var visibleCheckboxes = $('.url-item:visible input[type="checkbox"]');
        
        if (visibleCheckboxes.length > 0) {
            var allChecked = visibleCheckboxes.length === visibleCheckboxes.filter(':checked').length;
            visibleCheckboxes.prop('checked', !allChecked);
            
            // Update button text based on state
            $(this).text(allChecked ? $t('Select All') : $t('Deselect All'));
        } else {
            alert({
                title: $t('Information'),
                content: $t('No visible URLs to select. Please adjust your filters.')
            });
        }
        return false;
    });
    
    // Add Selected URLs button
    $(document).on('click', '#add-selected-urls', function(e) {
        e.preventDefault();
        
        if (!$(this).hasClass('processing')) {
            $(this).addClass('processing');
            
            var selectedUrls = [];
            $('.url-item input[type="checkbox"]:checked').each(function() {
                selectedUrls.push($(this).val());
            });
            
            debugLog('Adding selected URLs to custom list', selectedUrls);
            
            if (selectedUrls.length > 0) {
                // Get current textarea content
                var currentUrls = $('#magoarab_cdn_custom_urls_custom_url_list').val();
                
                // Add new URLs (ensure no duplicates)
                var existingUrls = currentUrls ? currentUrls.split("\n") : [];
                var newUrls = [];
                
                selectedUrls.forEach(function(url) {
                    if (existingUrls.indexOf(url) === -1) {
                        newUrls.push(url);
                    }
                });
                
                if (newUrls.length > 0) {
                    var updatedUrls = currentUrls ? currentUrls + "\n" + newUrls.join("\n") : newUrls.join("\n");
                    
                    // Update textarea
                    $('#magoarab_cdn_custom_urls_custom_url_list').val(updatedUrls);
                    
                    alert({
                        title: $t('Success'),
                        content: $t('Added %1 URLs to the custom URL list.').replace('%1', newUrls.length)
                    });
                } else {
                    alert({
                        title: $t('Information'),
                        content: $t('All selected URLs are already in the custom URL list.')
                    });
                }
            } else {
                alert({
                    title: $t('Information'),
                    content: $t('Please select at least one URL.')
                });
            }
            
            $(this).removeClass('processing');
        }
        
        return false;
    });
    
    // Upload to GitHub button
    $(document).on('click', '#upload-to-github', function(e) {
        e.preventDefault();
        
        if (!$(this).hasClass('processing')) {
            $(this).addClass('processing');
            
            var selectedUrls = [];
            $('.url-item input[type="checkbox"]:checked').each(function() {
                selectedUrls.push($(this).val());
            });
            
            debugLog('Selected URLs for upload', selectedUrls);
            
            if (selectedUrls.length > 0) {
                // Show confirmation dialog
                confirm({
                    title: $t('Confirm Upload'),
                    content: $t('Do you want to upload %1 selected files to GitHub?').replace('%1', selectedUrls.length),
                    actions: {
                        confirm: function() {
                            executeUpload(selectedUrls);
                        },
                        cancel: function() {
                            $('#upload-to-github').removeClass('processing');
                            debugLog('Upload canceled by user');
                        }
                    }
                });
            } else {
                alert({
                    title: $t('Information'),
                    content: $t('Please select at least one URL to upload.')
                });
                $('#upload-to-github').removeClass('processing');
            }
        }
        return false;
    });
    
    // Execute the upload process
    function executeUpload(selectedUrls) {
        // Disable button and show progress
        $('#upload-to-github').prop('disabled', true);
        $('#upload-to-github').text($t('Uploading...'));
        
        // Show progress indicator
        $('#upload-progress').show();
        $('#upload-progress .progress-status').text($t('Preparing files...'));
        $('#upload-progress .progress-bar').css('width', '0%');
        $('#upload-progress .upload-details').show();
        $('#upload-progress .current-file').text($t('Initializing...'));
        
        debugLog('Starting upload process for ' + selectedUrls.length + ' URLs');
        
        // Perform the upload
        $.ajax({
            url: '<?= $block->escapeJs($block->getUploadUrl()) ?>',
            type: 'POST',
            dataType: 'json',
            data: {
                form_key: window.FORM_KEY,
                urls: JSON.stringify(selectedUrls)
            },
            showLoader: false,
            success: function(response) {
                debugLog('Upload response', response);
                
                // Update progress to 100%
                $('#upload-progress .progress-bar').css('width', '100%');
                $('#upload-progress .progress-status').text($t('Upload completed'));
                
                if (response.success) {
                    // Show upload results details
                    var successMessage = response.message;
                    
                    if (response.results && response.results.details) {
                        successMessage += '<br><br><strong>' + $t('Upload Details:') + '</strong><br>';
                        successMessage += '<div style="max-height: 200px; overflow-y: auto; margin-top: 10px;">';
                        successMessage += '<table class="data-table" style="width:100%">';
                        successMessage += '<thead><tr>' +
                            '<th>' + $t('URL') + '</th>' +
                            '<th>' + $t('Status') + '</th>' +
                            '<th>' + $t('Message') + '</th>' +
                            '</tr></thead><tbody>';
                        
                        $.each(response.results.details, function(index, detail) {
                            var statusClass = detail.success ? 'success' : 'error';
                            var statusText = detail.success ? '✓ ' + $t('Success') : '✗ ' + $t('Failed');
                            var statusStyle = detail.success ? 'color:green;' : 'color:red;';
                            var message = detail.message || '';
                            
                            successMessage += '<tr>' +
                                '<td style="word-break: break-all;">' + detail.url + '</td>' +
                                '<td style="' + statusStyle + '">' + statusText + '</td>' +
                                '<td>' + message + '</td>' +
                                '</tr>';
                        });
                        
                        successMessage += '</tbody></table>';
                        successMessage += '</div>';
                    }

                    // Display results directly in the UI
                    $('#upload-result').html(successMessage).show();

                    // Ask user if they want to add URLs to custom list
                    confirm({
                        title: $t('Upload Successful'),
                        content: $t('Do you want to add these URLs to your custom URL list?'),
                        actions: {
                            confirm: function() {
                                // Get successful URLs
                                var successfulUrls = [];
                                if (response.results && response.results.details) {
                                    $.each(response.results.details, function(index, detail) {
                                        if (detail.success) {
                                            successfulUrls.push(detail.url);
                                        }
                                    });
                                }
                                
                                debugLog('Adding successful URLs to custom list', successfulUrls);
                                
                                // Add URLs to custom list
                                var currentUrls = $('#magoarab_cdn_custom_urls_custom_url_list').val();
                                
                                // Add new URLs (ensure no duplicates)
                                var existingUrls = currentUrls ? currentUrls.split("\n") : [];
                                var newUrls = [];
                                
                                successfulUrls.forEach(function(url) {
                                    if (existingUrls.indexOf(url) === -1) {
                                        newUrls.push(url);
                                    }
                                });
                                
                                var updatedUrls = currentUrls ? currentUrls + "\n" + newUrls.join("\n") : newUrls.join("\n");
                                
                                // Update textarea
                                $('#magoarab_cdn_custom_urls_custom_url_list').val(updatedUrls);
                                
                                alert({
                                    title: $t('Success'),
                                    content: $t('URLs added to custom list.')
                                });
                            }
                        }
                    });
                } else {
                    $('#upload-result').html('<div style="color: red; padding: 10px; background: #fff1f1; border: 1px solid #ffcaca;">' + 
                        '<strong>' + $t('Error') + ':</strong> ' + response.message + '</div>').show();
                    
                    alert({
                        title: $t('Error'),
                        content: response.message
                    });
                }
            },
            error: function(xhr, status, error) {
                debugLog('Upload error', { xhr: xhr.responseText, status: status, error: error });
                
                $('#upload-progress .progress-status').text($t('Upload failed'));
                
                // Try to parse response for error message
                var errorMsg = $t('An error occurred while uploading files to GitHub.');
                try {
                    if (xhr.responseText) {
                        var jsonResponse = JSON.parse(xhr.responseText);
                        if (jsonResponse.message) {
                            errorMsg += '<br>' + jsonResponse.message;
                        }
                    }
                } catch (e) {
                    console.error('Failed to parse error response', e);
                }
                
                $('#upload-result').html('<div style="color: red; padding: 10px; background: #fff1f1; border: 1px solid #ffcaca;">' + 
                    '<strong>' + $t('Error') + ':</strong> ' + errorMsg + '</div>').show();
                
                alert({
                    title: $t('Error'),
                    content: errorMsg
                });
            },
            complete: function() {
                $('#upload-to-github').prop('disabled', false);
                $('#upload-to-github').text($t('Upload to GitHub'));
                $('#upload-to-github').removeClass('processing');
            }
        });
    }
});
// إعداد debug info بحيث يكون مخفيًا بشكل افتراضي
$(document).ready(function() {
    // إخفاء قسم debug-info عند بدء التحميل
    $('#debug-info').hide();
    $('#debug-info .debug-content').hide();
    
    // إضافة معالج حدث لزر toggle-debug-details
    $('#toggle-debug-details').click(function() {
        var $debugInfo = $('#debug-info');
        var $debugContent = $('#debug-info .debug-content');
        var $toggleButton = $(this);
        
        if ($debugContent.is(':visible')) {
            $debugContent.hide();
            $toggleButton.text($t('Show Details'));
        } else {
            $debugInfo.show(); // إظهار الحاوية
            $debugContent.show();
            $toggleButton.text($t('Hide Details'));
        }
    });
});
// Hide debug info completely on page load and set up toggle button
$(document).ready(function() {
    // Make sure debug info is hidden
    $('#debug-info').hide();
    
    // Setup show debug info button
    $('#show-debug-info').click(function() {
        $('#debug-info').toggle();
        $(this).text(
            $('#debug-info').is(':visible') ? 
            '<?= __("Hide Debug Information") ?>' : 
            '<?= __("Show Debug Information") ?>'
        );
    });
});
</script>