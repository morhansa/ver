<?php
/**
 * @var $block \MagoArab\CdnIntegration\Block\Adminhtml\System\Config\UrlAnalyzer
 */
?>
<div class="url-analyzer-section">
    <div class="url-analyzer-content">
<div class="url-analyzer-form fieldset">
            <div class="field">
                <div class="control">
                   <div class="url-analyzer-box">
                        <h3 class="url-box-title"><?= __('CDN URL Analyzer') ?></h3>
                        <p class="url-box-description">
                            <?= __('Discover and integrate your store assets with CDN for faster loading times and better performance.') ?>
                        </p>
                        
                        <div class="url-box-container">
                            <div class="field url-field">
                                <label for="page_url_to_analyze" class="label">
                                    <span><?= __('Page URL to Analyze') ?></span>
                                </label>
                                <div class="control">
                                    <input type="text" id="page_url_to_analyze" class="input-text" 
                                        placeholder="<?= __('https://yourstore.com/category/products.html') ?>" 
                                        value="<?= $block->getStoreUrl() ?>">
                                </div>
                                <div class="url-description">
                                    <?= __('By default, the homepage will be analyzed. For better coverage, add URLs to specific categories, products, or any other pages from your store. The CDN will automatically serve all discovered static files.') ?>
                                </div>
                            </div>
							<div class="field advanced-options-field">
                                <label class="label">
                                    <span><?= __('Advanced Options') ?></span>
                                </label>
                                <div class="control">
                                    <div class="admin__field-option">
                                        <input type="checkbox" id="scan_linked_pages" name="scan_linked_pages" value="1" class="admin__control-checkbox">
                                        <label for="scan_linked_pages" class="admin__field-label">
                                            <?= __('Automatically scan linked pages (discovers more assets but takes longer)') ?>
                                        </label>
                                    </div>
                                </div>
                                <div class="linked-pages-options" style="display: none;">
                                    <select id="scan_depth" class="admin__control-select">
                                        <option value="1"><?= __('1 level deep (faster)') ?></option>
                                        <option value="2"><?= __('2 levels deep (recommended)') ?></option>
                                        <option value="3"><?= __('3 levels deep (thorough)') ?></option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="actions actions-analyze">
                                <?= $block->getButtonHtml() ?>
                            </div>
        <div id="url-analyzer-results" class="url-analyzer-results" style="display: none;">
            <div class="results-container">
                <h3 class="results-title"><?= __('URLs Found') ?></h3>
                <p class="results-subtitle"><?= __('Select the URLs you want to serve via CDN:') ?></p>
                
                <div class="url-list"></div>
                
                <div class="url-actions">
                    <button type="button" id="select-all-urls" class="action-secondary">
                        <span><?= __('Select All') ?></span>
                    </button>
                    <button type="button" id="add-selected-urls" class="action-primary">
                        <span><?= __('Add Selected URLs') ?></span>
                    </button>
                    <button type="button" id="upload-to-github" class="action-primary">
                        <span><?= __('Upload to GitHub') ?></span>
                    </button>
                </div>
                
                <div id="upload-progress" class="upload-progress" style="display: none;">
                    <div class="progress-status"></div>
                    <div class="progress-bar-container">
                        <div class="progress-bar"></div>
                    </div>
                    <div class="upload-details" style="display: none;">
                        <div class="upload-stats"></div>
                        <div class="current-file-container">
                            <span class="current-file-label"><?= __('Current file') ?>:</span> 
                            <span class="current-file"></span>
                        </div>
                    </div>
                </div>
                
                <div id="upload-result" class="upload-result" style="display: none;"></div>
            </div>
            
            <div class="debug-container">
                <div class="actions actions-debug-info">
                    <button type="button" id="show-debug-info" class="action-secondary">
                        <span><?= __('Show Debug Information') ?></span>
                    </button>
                </div>
                
                <div id="debug-info" class="debug-info" style="display: none;">
                    <h4 class="debug-title"><?= __('Debug Information') ?></h4>
                    <div class="debug-content"></div>
                </div>
            </div>
        </div>

    </div>
</div>
 </div>
</div>
</div>
</div>
</div>
<style>
.url-analyzer-section {
    margin-bottom: 0.1rem;
    font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;
}
.url-analyzer-content {
    width: 100%;
    max-width: 1200px;
}
.url-analyzer-description {
    margin-bottom: 1.8rem;
    font-size: 14px;
    line-height: 1.6;
    color: #41362f;
}
.url-analyzer-form {
    margin-bottom: 2rem;
}.field.advanced-options-field label {
    text-align: left !important;
}
.url-analyzer-form.fieldset .control {
    width: 100% !important;
}
.url-analyzer-form-title {
    margin-bottom: 1.2rem;
    font-size: 1.6rem;
    font-weight: 600;
    color: #303030 !important;
}
.url-analyzer-box {
    background: #ffffff !important;
    border: 1px solid #cccccc !important;
    border-radius: 4px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    padding: 0;
    margin-bottom: 2.5rem;
    overflow: hidden;
}tr#row_magoarab_cdn_url_analyzer_analyze_urls .value {
    width: 95% !important;
}
tr#row_magoarab_cdn_url_analyzer_analyze_urls td.label {
    width: 10% !important;
}
.url-box-title {
    color: #ffffff !important;
    font-size: 1.5rem;
    margin: 0;
    padding: 18px 25px;
    border-bottom: 1px solid #e3e3e3 !important;
    background: #eb5202;
    font-weight: 600;
}
.url-box-description {
    color: #555555 !important;
    margin: 0;
    padding: 20px 25px 5px;
    font-size: 14px;
    line-height: 1.5;
}
.url-box-container {
    padding: 5px 25px 25px;
}
.url-field {
    margin-bottom: 2rem;
}
.url-field .label {
    font-weight: 600;
    margin-bottom: 0.8rem;
    display: block;
    color: #303030;
    font-size: 14px;
}
label.label[for="page_url_to_analyze"] {
    text-align: left !important;
    padding: 0 !important;
}
.url-field .input-text {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #d1d1d1 !important;
    border-radius: 3px;
    font-size: 14px;
    transition: border-color 0.2s;
    box-shadow: inset 0 1px 3px rgba(0,0,0,0.06);
}
.url-field .input-text:focus {
    border-color: #eb5202;
    box-shadow: 0 0 5px rgba(92,106,195,0.2);
    outline: none;
}
.url-description {
    margin-top: 10px;
    color: #666666;
    font-size: 13px;
    line-height: 1.5;
	    float: left;
}
.url-analyzer-form.fieldset {
    padding: 0 !important;
    margin: 0 !important;
}
.advanced-options-field {
    margin-bottom: 2rem;
    padding: 15px;
    background: #f9f9f9;
    border-radius: 4px;
    border-left: 3px solid #eb5202;
}
.advanced-options-field .label {
    font-weight: 600;
    margin-bottom: 0.8rem;
    display: block;
    color: #303030;
    font-size: 14px;
}
.linked-pages-options {
    margin-top: 12px;
    margin-left: 28px;
    padding: 8px 0;
}
.linked-pages-options select {
    padding: 8px 12px;
    border: 1px solid #d1d1d1;
    border-radius: 3px;
    background-color: #ffffff !important;
}
.actions-analyze {
    text-align: right;
    margin-top: 25px;
}

/* Results section styles */
.url-analyzer-results {
    margin-top: 2.5rem;
}
.results-container {
    background: #ffffff;
    border: 1px solid #cccccc;
    border-radius: 4px;
    padding: 0;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    overflow: hidden;
}
.results-title {
    font-size: 1.5rem;
    margin: 0;
    padding: 18px 25px;
    border-bottom: 1px solid #e3e3e3;
    background: #eb5202;
    color: #ffffff !important;
    font-weight: 600;
}
.results-subtitle {
    margin: 0;
    padding: 15px 25px;
    font-size: 14px;
    color: #555555;
}
.url-list {
    max-height: 320px;
    overflow-y: auto;
    padding: 0;
    background: #fff;
    border: 1px solid #e3e3e3;
    margin: 0 25px 25px;
    border-radius: 3px;
}
.url-item {
    padding: 12px 15px;
    border-bottom: 1px solid #f0f0f0;
    transition: background-color 0.15s;
}
.url-item:hover {
    background-color: #f8f9ff;
}
.url-item:last-child {
    border-bottom: none;
}
.url-item label {
    font-family: 'Consolas', 'Monaco', monospace;
    word-break: break-all;
    padding-left: 8px;
    font-size: 13px;
    color: #444;
}
.url-item input[type="checkbox"] {
    margin-top: 3px;
    vertical-align: top;
}
.url-actions {
    display: flex;
    justify-content: space-between;
    padding: 0 25px 25px;
}
.action-secondary {
    background: #f1f1f1;
    border: 1px solid #d1d1d1;
    color: #333333;
    padding: 8px 16px;
    font-size: 14px;
    font-weight: 600;
    border-radius: 3px;
    cursor: pointer;
    transition: all 0.2s;
}
.action-secondary:hover {
    background: #e3e3e3;
}
.action-primary {
    background: #eb5202;
    border: 1px solid #4c59a3;
    color: #ffffff !important;
    padding: 8px 16px;
    font-size: 14px;
    font-weight: 600;
    border-radius: 3px;
    cursor: pointer;
    transition: all 0.2s;
    box-shadow: 0 2px 3px rgba(0,0,0,0.1);
}
.action-primary:hover {
    background: #4c59a3;
}
.url-actions .action-secondary {
    margin-right: 10px;
}
.url-actions .action-primary {
    margin-left: 10px;
}
.upload-progress {
    padding: 20px 25px;
    border-top: 1px solid #e3e3e3;
    background: #f9f9f9;
}
.progress-status {
    margin-bottom: 12px;
    font-weight: 600;
    color: #444444;
    font-size: 14px;
}
.progress-bar-container {
    height: 20px;
    background-color: #eeeeee;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
}
.progress-bar {
    height: 100%;
    width: 0;
    background-color: #4caf50;
    border-radius: 10px;
    transition: width 0.3s ease;
    background-image: linear-gradient(45deg, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
    background-size: 40px 40px;
    animation: progress-bar-stripes 2s linear infinite;
}
@keyframes progress-bar-stripes {
    from { background-position: 40px 0; }
    to { background-position: 0 0; }
}
.upload-details {
    margin-top: 10px;
    font-size: 13px;
}
.upload-stats {
    margin-bottom: 5px;
}
.current-file {
    font-family: monospace;
    display: inline-block;
    max-width: 90%;
    overflow: hidden;
    text-overflow: ellipsis;
    vertical-align: bottom;
}
.upload-result {
    padding: 15px 20px;
    border-top: 1px solid #e3e3e3;
}
.debug-container {
    margin-top: 1rem;
    text-align: right;
}
.debug-info {
    margin-top: 1rem;
    border: 1px solid #ddd;
    border-radius: 3px;
    background: #f9f9f9;
    text-align: left;
}
.debug-title {
    margin: 0;
    padding: 10px 15px;
    border-bottom: 1px solid #ddd;
    background: #eee;
    color: #333;
}
.debug-content {
    max-height: 200px;
    overflow-y: auto;
    padding: 15px;
    white-space: pre-wrap;
    font-family: monospace;
    font-size: 12px;
}
.url-analyzer-footer {
    margin-top: 1rem;
}
.url-analyzer-help-text {
    color: #666;
    font-size: 0.9em;
}

/* Empty results message */
.empty-results {
    padding: 30px 20px;
    text-align: center;
    color: #666666;
    background: #f9f9f9;
    border-radius: 3px;
}
.empty-results p {
    margin: 0 0 1rem;
    line-height: 1.6;
    font-size: 14px;
}
.empty-results:before {
    content: "!";
    display: block;
    width: 50px;
    height: 50px;
    margin: 0 auto 15px;
    font-size: 30px;
    line-height: 48px;
    border: 2px solid #e0e0e0;
    border-radius: 50%;
    color: #999999;
    font-weight: bold;
}
</style>
<script>
require([
    'jquery',
    'Magento_Ui/js/modal/modal',
    'Magento_Ui/js/modal/confirm',
    'Magento_Ui/js/modal/alert',
    'mage/translate'
], function ($, modal, confirm, alert, $t) {
    'use strict';

    // Debug log function
    function debugLog(message, data) {
        var timestamp = new Date().toISOString();
        var logMessage = '[' + timestamp + '] ' + message;
        if (data) {
            if (typeof data === 'object') {
                logMessage += '\n' + JSON.stringify(data, null, 2);
            } else {
                logMessage += '\n' + data;
            }
        }
        console.log('[CDN Debug] ' + logMessage);
        
        // Add to debug panel without showing it
        var $debugContent = $('#debug-info .debug-content');
        if ($debugContent.length) {
            $debugContent.append(logMessage + '\n\n');
            // Do NOT show debug info automatically
            $debugContent.scrollTop($debugContent[0].scrollHeight);
        }
    }

    // Init debug panel
    $('#debug-info .debug-content').empty();
    debugLog('Debug initialized. PHP version: <?= phpversion() ?>');
    debugLog('Form Key: ' + window.FORM_KEY);
    
    // Log URLs for debugging
    var analyzeUrl = '<?= $block->escapeJs($block->getAjaxUrl()) ?>';
    var uploadUrl = '<?= $block->escapeJs($block->getUrl('magoarab_cdn/cdn/uploadToGithub', ['_secure' => true])) ?>';
    debugLog('Analyze URL: ' + analyzeUrl);
    debugLog('Upload URL: ' + uploadUrl);

    // Setup show debug info button
    $(document).ready(function() {
        // Make sure debug info is hidden on load
        $('#debug-info').hide();
        
        // Setup toggle button for debug info
        $('#show-debug-info').click(function() {
            $('#debug-info').toggle();
            $(this).find('span').text(
                $('#debug-info').is(':visible') ? 
                $t('Hide Debug Information') : 
                $t('Show Debug Information')
            );
        });
        
        // Setup advanced options toggle
        $('#scan_linked_pages').change(function() {
            if ($(this).is(':checked')) {
                $('.linked-pages-options').slideDown(200);
            } else {
                $('.linked-pages-options').slideUp(200);
            }
        });
    });

    // Prevent form submission when clicking buttons
    $(document).on('click', '#select-all-urls, #add-selected-urls, #upload-to-github', function(e) {
        e.preventDefault();
        e.stopPropagation();
        return false;
    });

    $('#analyze_urls_button').click(function (event) {
        event.preventDefault();

        $(this).prop('disabled', true);
        $(this).find('span').text($t('Analyzing...'));
        
        // Get analysis parameters
        var urlToAnalyze = $('#page_url_to_analyze').val().trim();
        var scanLinkedPages = $('#scan_linked_pages').is(':checked');
        var scanDepth = $('#scan_depth').val();
        
        debugLog('Starting URL analysis', {
            url: urlToAnalyze,
            scanLinkedPages: scanLinkedPages,
            scanDepth: scanDepth
        });
        
        // Get existing URLs
        var existingUrls = [];
        var customUrlsTextarea = $('#magoarab_cdn_custom_urls_custom_url_list');
        
        if (customUrlsTextarea.length && customUrlsTextarea.val().trim()) {
            existingUrls = customUrlsTextarea.val().trim().split("\n");
            debugLog('Existing URLs found in Custom URLs list', existingUrls);
        }
		$.ajax({
            url: analyzeUrl,
            type: 'POST',
            dataType: 'json',
            data: {
                form_key: window.FORM_KEY,
                store_url: '<?= $block->escapeJs($block->getStoreUrl()) ?>',
                specific_url: urlToAnalyze,
                existing_urls: JSON.stringify(existingUrls),
                scan_linked_pages: scanLinkedPages ? 1 : 0,
                scan_depth: scanDepth
            },
            showLoader: true,
            success: function (response) {
                debugLog('Analysis AJAX success', response);
                if (response.success) {
                    // Show results section
                    $('#url-analyzer-results').show();
                    
                    // Clear previous results
                    $('#url-analyzer-results .url-list').empty();
                    $('#upload-result').hide();
                    
                    // Hide progress
                    $('#upload-progress').hide();
                    
                    // Add each URL as a checkbox
                    if (response.urls && response.urls.length > 0) {
                        debugLog('Found ' + response.urls.length + ' URLs');
                        $.each(response.urls, function(index, url) {
                            $('#url-analyzer-results .url-list').append(
                                '<div class="url-item">' +
                                '<input type="checkbox" id="url-' + index + '" value="' + url + '"/> ' +
                                '<label for="url-' + index + '">' + url + '</label>' +
                                '</div>'
                            );
                        });
                    } else {
                        debugLog('No URLs found');
                        $('#url-analyzer-results .url-list').html(
                            '<div class="empty-results">' +
                            '<p>' + $t('No new URLs found in this page. These files might already be in your custom URL list or they are core files that should not be served via CDN. Try analyzing different pages such as category, product, or content pages.') + '</p>' +
                            '</div>'
                        );
                    }
                } else {
                    debugLog('Analysis failed', response.message);
                    alert({
                        title: $t('Error'),
                        content: response.message
                    });
                    $('#url-analyzer-results').hide();
                }
            },
            error: function (xhr, status, error) {
                debugLog('Analysis AJAX error', { status: status, error: error, response: xhr.responseText });
                alert({
                    title: $t('Error'),
                    content: $t('An error occurred while analyzing URLs: ') + error
                });
                $('#url-analyzer-results').hide();
            },
            complete: function () {
                $('#analyze_urls_button').prop('disabled', false);
                $('#analyze_urls_button').find('span').text($t('Analyze Storefront'));
            }
        });
    });
    
    // Select All button
    $(document).on('click', '#select-all-urls', function(e) {
        e.preventDefault();
        var checkboxes = $('#url-analyzer-results .url-list input[type="checkbox"]');
        var allChecked = checkboxes.length === checkboxes.filter(':checked').length;
        
        checkboxes.prop('checked', !allChecked);
        $(this).find('span').text(allChecked ? $t('Select All') : $t('Deselect All'));
        
        return false;
    });
    
    // Add Selected URLs button
    $(document).on('click', '#add-selected-urls', function(e) {
        e.preventDefault();
        var selectedUrls = [];
        $('#url-analyzer-results .url-list input[type="checkbox"]:checked').each(function() {
            selectedUrls.push($(this).val());
        });
        
        debugLog('Adding selected URLs', selectedUrls);
        
        if (selectedUrls.length > 0) {
            // Get current textarea content
            var currentUrls = $('#magoarab_cdn_custom_urls_custom_url_list').val();
            
            // Add new URLs (ensure no duplicates)
            var existingUrls = currentUrls ? currentUrls.split("\n") : [];
            var newUrls = [];
            
            selectedUrls.forEach(function(url) {
                if (existingUrls.indexOf(url) === -1) {
                    newUrls.push(url);
                }
            });
            
            var updatedUrls = currentUrls ? currentUrls + "\n" + newUrls.join("\n") : newUrls.join("\n");
            
            // Update textarea
            $('#magoarab_cdn_custom_urls_custom_url_list').val(updatedUrls);
            
            debugLog('Added ' + newUrls.length + ' URLs to custom list');
            
            alert({
                title: $t('Success'),
                content: $t('Added %1 URLs to the custom URL list.').replace('%1', newUrls.length)
            });
        } else {
            debugLog('No URLs selected');
            alert({
                title: $t('Information'),
                content: $t('Please select at least one URL.')
            });
        }
        return false;
    });
	// Upload to GitHub button
    $(document).on('click', '#upload-to-github', function(e) {
        e.preventDefault();
        
        var selectedUrls = [];
        $('#url-analyzer-results .url-list input[type="checkbox"]:checked').each(function() {
            selectedUrls.push($(this).val());
        });
        
        debugLog('Selected URLs for upload', selectedUrls);
        
        if (selectedUrls.length > 0) {
            // Show confirmation dialog
            confirm({
                title: $t('Confirm Upload'),
                content: $t('Do you want to upload %1 selected files to GitHub?').replace('%1', selectedUrls.length),
                actions: {
                    confirm: function() {
                        // Disable button and show progress
                        $('#upload-to-github').prop('disabled', true);
                        $('#upload-to-github').find('span').text($t('Uploading...'));
                        
                        // Show progress indicator and reset
                        $('#upload-progress').show();
                        $('.progress-status').text($t('Initializing upload...'));
                        $('.progress-bar').css('width', '0%');
                        $('.upload-details').show();
                        $('.upload-stats').text($t('Preparing files...'));
                        $('.current-file').text('');
                        
                        // Reset results area
                        $('#upload-result').hide();
                        
                        debugLog('Starting upload to GitHub', {
                            url: uploadUrl,
                            formKey: window.FORM_KEY,
                            urlCount: selectedUrls.length
                        });
                        
                        // Setup upload tracking
                        var totalFiles = selectedUrls.length;
                        var processedFiles = 0;
                        var successfulFiles = 0;
                        var failedFiles = 0;
                        var startTime = new Date().getTime();
                        var results = {
                            details: []
                        };
                        
                        // Process in batches to prevent server overload
                        var batchSize = 10; // Process 10 files at a time
                        var batches = [];
                        
                        // Split files into batches
                        for (var i = 0; i < selectedUrls.length; i += batchSize) {
                            batches.push(selectedUrls.slice(i, i + batchSize));
                        }
                        
                        debugLog('Split upload into ' + batches.length + ' batches of max ' + batchSize + ' files each');
                        
                        // Process batches sequentially
                        processBatch(0);
                        
                        function processBatch(batchIndex) {
                            if (batchIndex >= batches.length) {
                                // All batches completed
                                uploadCompleted();
                                return;
                            }
                            
                            var currentBatch = batches[batchIndex];
                            var batchProgress = 0;
                            var batchSuccesses = 0;
                            var batchFailures = 0;
                            var batchResults = [];
                            
                            // Update progress status
                            var overallProgress = Math.round((processedFiles / totalFiles) * 100);
                            $('.progress-bar').css('width', overallProgress + '%');
                            $('.progress-status').text(
                                $t('Processing batch %1 of %2 (%3%)').replace('%1', batchIndex + 1)
                                .replace('%2', batches.length).replace('%3', overallProgress)
                            );
                            
                            $('.upload-stats').html(
                                $t('Processed: %1/%2 | Success: %3 | Failed: %4').replace('%1', processedFiles)
                                .replace('%2', totalFiles).replace('%3', successfulFiles).replace('%4', failedFiles)
                            );
                            
                            // Calculate progress so far
                            var elapsedSecs = Math.round((new Date().getTime() - startTime) / 1000);
                            var filePerSec = processedFiles > 0 ? (processedFiles / elapsedSecs).toFixed(2) : 0;
                            var remainingSecs = filePerSec > 0 ? Math.round((totalFiles - processedFiles) / filePerSec) : 0;
                            
                            var timeStats = '';
                            if (processedFiles > 0) {
                                timeStats = '<br>' + $t('Elapsed: %1s | Remaining: ~%2s | Speed: %3 files/sec')
                                    .replace('%1', elapsedSecs)
                                    .replace('%2', remainingSecs)
                                    .replace('%3', filePerSec);
                                $('.upload-stats').append(timeStats);
                            }
                            
                            debugLog('Processing batch ' + (batchIndex + 1) + ' of ' + batches.length, currentBatch);
                            
                            // Process each URL in this batch in parallel
                            var batchRequests = [];
                            
                            $.each(currentBatch, function(index, url) {
                                // Update current file display
                                $('.current-file').text(url);
                                
                                // Create deferred object for this file
                                var dfd = $.Deferred();
                                batchRequests.push(dfd.promise());
                                
                                // Upload single file
                                $.ajax({
                                    url: uploadUrl,
                                    type: 'POST',
                                    dataType: 'json',
                                    data: {
                                        form_key: window.FORM_KEY,
                                        urls: JSON.stringify([url]), // Send as array with single item
                                        single_file: true // Flag for server to handle single file upload
                                    },
                                    success: function(response) {processedFiles++;
                                        batchProgress++;
                                        
                                        // Process result
                                        if (response.success && response.results && 
                                            response.results.details && response.results.details.length > 0) {
                                            
                                            var fileResult = response.results.details[0];
                                            if (fileResult.success) {
                                                successfulFiles++;
                                                batchSuccesses++;
                                                debugLog('File upload success: ' + url);
                                            } else {
                                                failedFiles++;
                                                batchFailures++;
                                                debugLog('File upload failed: ' + url, fileResult.message);
                                            }
                                            
                                            // Add to results
                                            results.details.push(fileResult);
                                            
                                            // Update progress immediately
                                            var currentProgress = Math.round((processedFiles / totalFiles) * 100);
                                            $('.progress-bar').css('width', currentProgress + '%');
                                            
                                            $('.upload-stats').html(
                                                $t('Processed: %1/%2 | Success: %3 | Failed: %4').replace('%1', processedFiles)
                                                .replace('%2', totalFiles).replace('%3', successfulFiles).replace('%4', failedFiles)
                                            );
                                            
                                            // Add time stats if available
                                            if (processedFiles > 0) {
                                                var elapsedSecs = Math.round((new Date().getTime() - startTime) / 1000);
                                                var filePerSec = (processedFiles / elapsedSecs).toFixed(2);
                                                var remainingSecs = Math.round((totalFiles - processedFiles) / filePerSec);
                                                
                                                var timeStats = '<br>' + $t('Elapsed: %1s | Remaining: ~%2s | Speed: %3 files/sec')
                                                    .replace('%1', elapsedSecs)
                                                    .replace('%2', remainingSecs)
                                                    .replace('%3', filePerSec);
                                                $('.upload-stats').append(timeStats);
                                            }
                                        } else {
                                            // API returned success but no valid details
                                            failedFiles++;
                                            batchFailures++;
                                            
                                            debugLog('File upload missing details: ' + url, response);
                                            
                                            // Add generic result
                                            results.details.push({
                                                url: url,
                                                success: false,
                                                message: response.message || $t('Unknown error')
                                            });
                                        }
                                        
                                        // Resolve this file's promise
                                        dfd.resolve();
                                    },
                                    error: function(xhr, status, error) {
                                        processedFiles++;
                                        batchProgress++;
                                        failedFiles++;
                                        batchFailures++;
                                        
                                        debugLog('File upload AJAX error: ' + url, { 
                                            status: status, 
                                            error: error, 
                                            response: xhr.responseText
                                        });
                                        
                                        // Add error result
                                        results.details.push({
                                            url: url,
                                            success: false,
                                            message: $t('AJAX error: %1').replace('%1', error)
                                        });
                                        
                                        // Update progress UI
                                        var currentProgress = Math.round((processedFiles / totalFiles) * 100);
                                        $('.progress-bar').css('width', currentProgress + '%');
                                        
                                        $('.upload-stats').html(
                                            $t('Processed: %1/%2 | Success: %3 | Failed: %4').replace('%1', processedFiles)
                                            .replace('%2', totalFiles).replace('%3', successfulFiles).replace('%4', failedFiles)
                                        );
                                        
                                        // Resolve this file's promise (even though it failed)
                                        dfd.resolve();
                                    }
                                });
                            });
                            
                            // When all files in this batch are processed, move to next batch
                            $.when.apply($, batchRequests).then(function() {
                                debugLog('Batch ' + (batchIndex + 1) + ' completed', {
                                    processed: batchProgress,
                                    success: batchSuccesses,
                                    failed: batchFailures
                                });
                                
                                // Small delay before next batch to allow server to breathe
                                setTimeout(function() {
                                    processBatch(batchIndex + 1);
                                }, 500);
                            });
                        }function uploadCompleted() {
                            debugLog('All batches completed', {
                                totalFiles: totalFiles,
                                processed: processedFiles,
                                successful: successfulFiles,
                                failed: failedFiles,
                                elapsedTime: Math.round((new Date().getTime() - startTime) / 1000) + 's'
                            });
                            
                            // Update progress to 100%
                            $('.progress-bar').css('width', '100%');
                            $('.progress-status').text($t('Upload completed'));
                            
                            // Final stats update
                            var elapsedSecs = Math.round((new Date().getTime() - startTime) / 1000);
                            var filePerSec = (processedFiles / elapsedSecs).toFixed(2);
                            
                            $('.upload-stats').html(
                                $t('Completed: %1/%2 | Success: %3 | Failed: %4').replace('%1', processedFiles)
                                .replace('%2', totalFiles).replace('%3', successfulFiles).replace('%4', failedFiles) +
                                '<br>' + $t('Total time: %1s | Avg speed: %2 files/sec')
                                .replace('%1', elapsedSecs)
                                .replace('%2', filePerSec)
                            );
                            
                            // Clear current file display
                            $('.current-file').text($t('Completed'));
                            
                            // Format results for display
                            if (results.details && results.details.length > 0) {
                                var successMessage = $t('Upload completed with %1 successful and %2 failed files.')
                                    .replace('%1', successfulFiles).replace('%2', failedFiles);
                                
                                successMessage += '<br><br><strong>' + $t('Upload Details:') + '</strong><br>';
                                successMessage += '<div class="upload-details-table" style="max-height: 300px; overflow-y: auto; margin-top: 10px;">';
                                successMessage += '<table class="data-table" style="width:100%">';
                                successMessage += '<thead><tr>' +
                                    '<th>' + $t('URL') + '</th>' +
                                    '<th>' + $t('Status') + '</th>' +
                                    '</tr></thead><tbody>';
                                
                                $.each(results.details, function(index, detail) {
                                    var statusClass = detail.success ? 'success' : 'error';
                                    var statusText = detail.success ? '✓ ' + $t('Success') : '✗ ' + $t('Failed');
                                    var statusStyle = detail.success ? 'color:green;' : 'color:red;';
                                    var statusMessage = detail.message ? '<br><small>' + detail.message + '</small>' : '';
                                    
                                    successMessage += '<tr>' +
                                        '<td style="word-break: break-all;">' + detail.url + '</td>' +
                                        '<td style="' + statusStyle + '">' + statusText + statusMessage + '</td>' +
                                        '</tr>';
                                });
                                
                                successMessage += '</tbody></table>';
                                successMessage += '</div>';
                                
                                // Display results
                                $('#upload-result').html(successMessage).show();
                                
                                // If there are successful uploads, ask if user wants to add them to custom list
                                if (successfulFiles > 0) {
                                    confirm({
                                        title: $t('Upload Successful'),
                                        content: $t('Do you want to add the successful URLs to your custom URL list?'),
                                        actions: {
                                            confirm: function() {
                                                // Get successful URLs
                                                var successfulUrls = [];
                                                $.each(results.details, function(index, detail) {
                                                    if (detail.success) {
                                                        successfulUrls.push(detail.url);
                                                    }
                                                });
                                                
                                                debugLog('Adding successful URLs to custom list', successfulUrls);
                                                
                                                // Add URLs to custom list
                                                var currentUrls = $('#magoarab_cdn_custom_urls_custom_url_list').val();
                                                
                                                // Add new URLs (ensure no duplicates)
                                                var existingUrls = currentUrls ? currentUrls.split("\n") : [];
                                                var newUrls = [];
                                                
                                                successfulUrls.forEach(function(url) {
                                                    if (existingUrls.indexOf(url) === -1) {
                                                        newUrls.push(url);
                                                    }
                                                });
                                                
                                                var updatedUrls = currentUrls ? currentUrls + "\n" + newUrls.join("\n") : newUrls.join("\n");
                                                
                                                // Update textarea
                                                $('#magoarab_cdn_custom_urls_custom_url_list').val(updatedUrls);
                                                
                                                alert({
                                                    title: $t('Success'),
                                                    content: $t('URLs added to custom list.')
                                                });
                                            }
                                        }
                                    });
                                }
                            }
                            
                            // Reset upload button
                            $('#upload-to-github').prop('disabled', false);
                            $('#upload-to-github').find('span').text($t('Upload to GitHub'));
                        }
                    }
                }
            });
        } else {
            debugLog('No URLs selected for upload');
            alert({
                title: $t('Information'),
                content: $t('Please select at least one URL to upload.')
            });
        }
        return false;
    });
});
</script>